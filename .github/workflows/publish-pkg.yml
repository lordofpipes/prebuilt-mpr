# Update an MPR package.
name: Update Package
on:
  workflow_dispatch:
    inputs:
      # A JSON array. The array items are objects containing these keys:
      # - 'arch'
      # - 'distro'
      # - 'image-tag'
      targets:
        required: true
        type: string

jobs:
  update-pkg:
    name: Build Package (${{ matrix.target.distro }}:${{ matrix.target.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(inputs.targets) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Build package
        run: |
          echo "${SCRIPT}" | docker run \
            -i \
            -v "${PWD}:/home/makedeb" \
            --platform "linux/${{ matrix.target.arch }}" \
            proget.hunterwittenborn.com/docker/makedeb/makedeb:${{ matrix.target.image-tag }}
        env:
          SCRIPT: |
            export "DEBIAN_FRONTEND=${{ vars.DEBIAN_FRONTEND }}"
            sudo -E apt-get install git locales-all -y
            export LANG='en_US.UTF-8'
            makedeb -s --no-confirm --pass-env
      - name: Upload built packages
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.target.distro }}:${{ matrix.target.arch }}"
  set-status:
    name: Set Pending Status
    runs-on: ubuntu-latest
    needs: [update-pkg]
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set status
        id: issue
        run: |
          pkg="$(echo "${{ github.ref_name }}" | sed 's|^pkg-update/||')"
          number="$(gh issue list | grep "\`${pkg}\`" | awk '{print $1}')"
          body="$(gh issue view "${number}" --json body -q '.body' | sed "s|.*Building...|:memo: Pending publish approval...|")"
          gh issue edit "${number}" -b "${body}"
  publish-pkgs:
    name: Publish Packages
    runs-on: ubuntu-latest
    environment: Prebuilt-MPR
    needs: [set-status]
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set status
        id: issue
        run: |
          pkg="$(echo "${{ github.ref_name }}" | sed 's|^pkg-update/||')"
          number="$(gh issue list | grep "\`${pkg}\`" | awk '{print $1}')"
          body="$(gh issue view "${number}" --json body -q '.body' | sed "s|.*Pending publish approval...|:package: Deploying...|")"
          gh issue edit "${number}" -b "${body}"
  update-status:
    name: Update Status
    runs-on: ubuntu-latest
    needs: publish-pkgs
    if: always() || cancelled()
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get issue number
        id: issue
        run: |
          pkg="$(echo "${{ github.ref_name }}" | sed 's|^pkg-update/||')"
          gh issue list | grep "\`${pkg}\`" | awk '{print $1}' | echo "NUMBER=$(cat)" >> "${GITHUB_OUTPUT}"
      - name: Set status
        run: |
          if [[ "${{ needs.publish-pkgs.result }}" == 'failure' || "${{ needs.publish-pkgs.result }}" == 'skipped' ]]; then
            msg=':x: Failed'
          elif [[ "${{ needs.publish-pkgs.result }}" == 'cancelled' ]]; then
            msg=':x: Cancelled'
          elif [[ "${{ needs.publish-pkgs.result }}" == 'success' ]]; then
            msg=':tada: Deployed'
          else
            echo 'Unknown result type: ${{ needs.publish-pkgs.result }}' 1>&2
            exit 1
          fi
          body="$(gh issue view '${{ steps.issue.outputs.NUMBER }}' --json body -q '.body' | sed -e "s|.*Building...|${msg}|"  -e "s|.*Pending publish.*|${msg}|" -e "s|.*Deploying...|${msg}|")"
          gh issue edit "${{ steps.issue.outputs.NUMBER }}" -b "${body}"


      # - name: Install prerequisites
      #   run: sudo apt install git locales-all -y
      # - name: Correct permissions so makedeb can run
      #   run: chown 'makedeb:makedeb' ./ "${HOME}" -R
      # - name: Run makedeb
      #   run: sudo -Eu makedeb makedeb -s --no-confirm --pass-env
      #   env:
          # DEBIAN_FRONTEND: "${{ vars.DEBIAN_FRONTEND }}"
          # # Needed to extract some tar archives.
          # LANG: "en_US.UTF-8"
      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.distro-image }}
      #     path: '*.deb'
